from pynput import keyboard
try:
        from lib.neopixel import NeoPixel
except:
    from Algo.lib.neopixel import NeoPixel
from image_maker import image_maker


strand = NeoPixel('COM3')

def labyrinth(list_color):
    global position_x, position_y

    """def recup_startend():
        global start, end

        start_test, end_test = False, False

        for y in range(len(list_color)):
            for x in range(len(list_color[y])):

                    if start_test and end_test is True:
                        break

                    else:
                        if start_test == False and int(list_color[y][x][1]) == 0 and int(list_color[y][x][2]) == 0 and int(list_color[y][x][3]) == 255:
                            start = (x,y)
                            start_led = list_color[0]
                            start_test = True

                        if end_test == False and int(list_color[y][x][1]) == 0 and int(list_color[y][x][2]) == 255 and int(list_color[y][x][3]) == 0:
                            end = (x,y)
                            end_led = list_color[0]
                            end_test = True

        strand.show()"""

    
    image_maker("scribble_creation", list_color)
                    
    recup_startend()

    position_x = start[0]
    position_y = start[1]

    def verif_position():
        pass

    def player():
        global position_x, position_y

        if position_y%2 == 0:
                if position_y-1 <= 0:
                    player_position = position_x
                    position_y = 0
                else:
                    player_position = position_x + 22*(position_y-1)

        else:
            player_position = 22*position_y-position_x


        strand.setPixelColor(player_position, 255, 153, 51)
        strand.show()
        

    
	# +------- Fonction et code pour les inputs ------+ #
    def key_press(key):
        global position_x, position_y
        """:param key: (z,s,d,q) Touches pour diriger le snake."""
        if   key.char=='z': position_y +=1 
        elif key.char=='d':  position_x +=1 
        elif key.char=='s':  position_y -=1 
        elif key.char=='q':  position_x -=1

        verif_position()
        player()
	
	# - Ecouter continuellement pour un input.
    listener = keyboard.Listener(on_press=key_press)
    listener.start()
	# +-----------------------------------------------+ #
    

if __name__ == "__main__":
    list_color = [[[0, 255, 0, 0], [1, 255, 0, 0], [2, 255, 0, 0], [3, 255, 0, 0], [4, 255, 0, 0], [5, 255, 0, 0], [6, 255, 0, 0], [7, 255, 0, 0], [8, 255, 0, 0], [9, 255, 0, 0], [10, 255, 0, 0], [11, 255, 0, 0], [12, 
255, 0, 0], [13, 255, 0, 0], [14, 255, 0, 0], [15, 255, 0, 0], [16, 255, 0, 0], [17, 255, 0, 0], [18, 255, 0, 0], [19, 255, 0, 0], [20, 255, 0, 0], [21, 0, 255, 0]], [[22, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [18, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [4, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [23, 255, 0, 0]], [[22, 255, 0, 0], ['x', 'r', 'g', 'b'], [24, 255, 0, 0], ['x', 'r', 'g', 'b'], [26, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [30, 255, 0, 0], [31, 255, 0, 0], [32, 255, 0, 0], [33, 255, 0, 0], [34, 255, 0, 0], [35, 255, 0, 0], [36, 255, 0, 0], [37, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [40, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [43, 255, 0, 0]], [[66, 255, 0, 0], ['x', 'r', 'g', 'b'], [64, 255, 0, 0], ['x', 'r', 'g', 'b'], [62, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [58, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [51, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [48, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [45, 255, 0, 0]], [[66, 255, 0, 0], ['x', 'r', 'g', 'b'], [68, 255, 0, 0], ['x', 'r', 'g', 'b'], [70, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [74, 255, 0, 0], [75, 255, 0, 0], [76, 255, 0, 0], [77, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [81, 255, 
0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [84, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [87, 255, 0, 0]], [[110, 255, 0, 0], ['x', 'r', 'g', 'b'], [108, 255, 0, 0], ['x', 'r', 'g', 'b'], [106, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [99, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [95, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [92, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [89, 255, 0, 0]], [[110, 255, 0, 0], 
['x', 'r', 'g', 'b'], [112, 255, 0, 0], ['x', 'r', 'g', 'b'], [114, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 
'g', 'b'], [121, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [125, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [128, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [131, 255, 0, 0]], [[154, 255, 0, 0], ['x', 'r', 'g', 'b'], [152, 255, 0, 0], ['x', 'r', 'g', 'b'], [150, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [143, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [139, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [136, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [133, 255, 0, 0]], [[154, 255, 0, 0], ['x', 'r', 'g', 'b'], [156, 255, 0, 0], ['x', 'r', 'g', 'b'], [158, 255, 0, 0], ['x', 'r', 'g', 'b'], [160, 255, 0, 0], [161, 255, 0, 0], [162, 255, 0, 0], [163, 255, 0, 0], ['x', 'r', 'g', 'b'], [165, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [169, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [172, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [175, 255, 0, 0]], [[198, 255, 0, 0], ['x', 'r', 'g', 'b'], [196, 255, 0, 0], ['x', 'r', 'g', 'b'], [194, 255, 0, 0], ['x', 'r', 'g', 'b'], [192, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [189, 255, 0, 0], ['x', 'r', 'g', 'b'], [187, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 
'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [183, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [180, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [177, 255, 0, 0]], [[198, 255, 0, 0], ['x', 'r', 'g', 'b'], [200, 255, 0, 0], ['x', 'r', 'g', 'b'], [202, 255, 0, 0], ['x', 'r', 'g', 'b'], [204, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [207, 255, 0, 0], ['x', 'r', 'g', 'b'], [209, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [213, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [216, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [219, 255, 0, 0]], [[242, 255, 0, 0], ['x', 'r', 'g', 'b'], [240, 255, 0, 0], ['x', 'r', 'g', 'b'], [238, 255, 0, 0], ['x', 'r', 'g', 'b'], [236, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [233, 255, 0, 0], ['x', 'r', 'g', 'b'], [231, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [227, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [224, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [221, 255, 0, 0]], [[242, 255, 0, 0], ['x', 'r', 'g', 'b'], [244, 255, 0, 0], ['x', 'r', 'g', 'b'], [246, 255, 0, 0], ['x', 'r', 'g', 'b'], [248, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [251, 255, 0, 0], ['x', 'r', 'g', 'b'], [253, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [257, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [260, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [263, 255, 0, 0]], [[286, 255, 0, 0], ['x', 'r', 'g', 'b'], [284, 255, 0, 0], ['x', 'r', 'g', 'b'], [282, 255, 0, 0], ['x', 'r', 'g', 'b'], [280, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [277, 255, 0, 0], ['x', 'r', 'g', 'b'], [275, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [271, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [268, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [265, 255, 0, 0]], [[286, 255, 0, 0], ['x', 'r', 'g', 'b'], [288, 255, 0, 0], ['x', 'r', 'g', 'b'], [290, 255, 0, 0], ['x', 'r', 'g', 'b'], [292, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [295, 255, 0, 0], ['x', 'r', 'g', 'b'], [297, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [301, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [304, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], 
[307, 255, 0, 0]], [[330, 255, 0, 0], ['x', 'r', 'g', 'b'], [328, 255, 0, 0], ['x', 'r', 'g', 'b'], [326, 255, 0, 0], ['x', 'r', 'g', 'b'], [324, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [321, 255, 0, 0], ['x', 'r', 'g', 'b'], [319, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [315, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [312, 255, 0, 
0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [309, 255, 0, 0]], [[330, 255, 0, 0], ['x', 'r', 'g', 'b'], [332, 255, 0, 0], ['x', 'r', 'g', 'b'], [334, 255, 0, 0], ['x', 'r', 'g', 'b'], [336, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [339, 255, 0, 0], ['x', 'r', 'g', 'b'], [341, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [345, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [348, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [351, 255, 0, 0]], [[374, 255, 0, 0], ['x', 'r', 'g', 'b'], [372, 255, 0, 0], ['x', 'r', 'g', 'b'], [370, 255, 0, 0], ['x', 'r', 'g', 'b'], [368, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [365, 255, 0, 0], [364, 255, 0, 0], [363, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [360, 
255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [356, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [353, 255, 0, 0]], [[374, 255, 0, 0], ['x', 'r', 'g', 'b'], [376, 255, 0, 0], ['x', 'r', 'g', 'b'], [378, 255, 0, 0], ['x', 'r', 'g', 'b'], [380, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 
'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [388, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [392, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [395, 255, 0, 0]], [[418, 255, 0, 0], ['x', 'r', 'g', 'b'], [416, 255, 0, 0], ['x', 'r', 'g', 'b'], [414, 255, 0, 0], [413, 255, 0, 0], [412, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [409, 255, 0, 0], [408, 255, 0, 0], [407, 255, 0, 0], [406, 255, 0, 0], [405, 255, 0, 0], [404, 255, 0, 0], [403, 255, 0, 0], [402, 255, 0, 0], [401, 255, 0, 0], [400, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [397, 255, 0, 0]], [[418, 255, 0, 0], ['x', 'r', 'g', 'b'], [420, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [439, 255, 0, 0]], [[462, 0, 0, 255], ['x', 'r', 'g', 'b'], [460, 255, 0, 0], [459, 255, 0, 0], [458, 255, 0, 0], 
[457, 255, 0, 0], [456, 255, 0, 0], [455, 255, 0, 0], [454, 255, 0, 0], [453, 255, 0, 0], [452, 255, 0, 0], [451, 255, 0, 0], [450, 255, 0, 0], [449, 255, 0, 0], [448, 255, 0, 0], [447, 255, 0, 0], [446, 255, 0, 0], [445, 255, 0, 0], [444, 255, 0, 0], [443, 255, 0, 0], [442, 255, 0, 0], [441, 255, 0, 0]]]
    labyrinth(list_color)