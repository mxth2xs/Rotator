from turtle import position
from pynput import keyboard
try:
    from lib.neopixel_arduino import NeoPixel_arduino
except:
    from Algo.lib.neopixel_arduino import NeoPixel_arduino
from image_maker import image_maker

def labyrinth(list_color):
    game = True 
    
    while game:
        global start, end, position_x, position_y
        image_maker("scribble_creation", list_color)


        def recup_startend():
            global start, end, position_x, position_y

            start_test, end_test = False, False

            for y in range(len(list_color)):
                for x in range(len(list_color[y])):

                    if list_color[y][x][0] != "x":
                        if start_test and end_test is True:
                            break

                        else:
                            if start_test == False and int(list_color[y][x][1]) == 0 and int(list_color[y][x][2]) == 0 and int(list_color[y][x][3]) == 255:
                                start = (x,y)
                                start_led = list_color[0]
                                start_test = True

                            if end_test == False and int(list_color[y][x][1]) == 0 and int(list_color[y][x][2]) == 255 and int(list_color[y][x][3]) == 0:
                                end = (x,y)
                                end_led = list_color[0]
                                end_test = True

            strand.show()

        recup_startend()

        position_x = start[0]
        position_y = start[1]

        def verif_position():
            pass

        def player():
            global position_x, position_y

            if position_y%2 == 0:
                    if position_y-1 <= 0:
                        player_position = position_x
                        position_y = 0
                    else:
                        player_position = position_x + 22*(position_y-1)

            else:
                player_position = 22*position_y-position_x


            strand.setPixelColor(player_position, 255, 153, 51)
            strand.show()
        

    
	# +------- Fonction et code pour les inputs ------+ #
    def key_press(key):
        global position_x, position_y
        """:param key: (z,s,d,q) Touches pour diriger le snake."""
        if   key.char=='z': position_y +=1 
        elif key.char=='d':  position_x +=1 
        elif key.char=='s':  position_y -=1 
        elif key.char=='q':  position_x -=1

        verif_position()
        player()
	
	# - Ecouter continuellement pour un input.
    listener = keyboard.Listener(on_press=key_press)
    listener.start()
	# +-----------------------------------------------+ #

if __name__ == "__main__":
    list_color = [[[0, 255, 0, 0], [1, 255, 0, 0], [2, 255, 0, 0], [3, 255, 0, 0], [4, 255, 0, 0], [5, 255, 0, 0], [6, 255, 0, 0], [7, 255, 0, 0], [8, 255, 0, 0], [9, 255, 0, 0], [10, 255, 0, 0], [11, 255, 0, 0], [12, 255, 0, 0], [13, 255, 0, 0], [14, 255, 0, 0], [15, 255, 0, 0], [16, 255, 0, 0], [17, 255, 0, 0], [18, 255, 0, 0], [19, 255, 0, 0], [20, 255, 0, 0], [21, 255, 0, 0]], [[43, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [23, 
    0, 255, 0], [22, 255, 0, 0]], [[44, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], 
    ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [65, 255, 0, 0]], [[87, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 
    'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [66, 255, 0, 0]], [[88, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [109, 255, 0, 0]], [[131, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 
    'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [110, 255, 0, 0]], [[132, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [153, 255, 0, 0]], [[175, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 
    'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [154, 255, 0, 0]], [[176, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [197, 255, 0, 0]], [[219, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], 
    ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [198, 255, 0, 0]], [[220, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], 
    ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [241, 255, 0, 0]], [[263, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [242, 255, 0, 0]], [[264, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 
    'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [285, 255, 0, 0]], [[307, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [286, 255, 0, 0]], [[308, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 
    'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [329, 255, 0, 0]], [[351, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [330, 255, 0, 0]], [[352, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], 
    ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [373, 255, 0, 0]], [[395, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [374, 255, 0, 0]], [[396, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [417, 255, 0, 0]], [[439, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 
    'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [418, 255, 0, 0]], [[440, 255, 0, 0], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 
    'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], ['x', 'r', 'g', 'b'], [461, 255, 0, 0]], [[483, 0, 0, 255], ['x', 'r', 'g', 'b'], [481, 255, 0, 0], [480, 255, 0, 0], [479, 255, 0, 0], [478, 255, 0, 0], [477, 255, 0, 0], [476, 255, 0, 0], [475, 255, 0, 0], [474, 255, 0, 0], 
    [473, 255, 0, 0], [472, 255, 0, 0], [471, 255, 0, 0], [470, 255, 0, 0], [469, 255, 0, 0], [468, 255, 0, 0], [467, 255, 0, 0], [466, 255, 0, 0], [465, 255, 0, 0], [464, 255, 0, 0], [463, 255, 0, 0], [462, 255, 0, 0]]]

    # +----------------- Config LEDs -----------------+ #
    try:
        from lib.neopixel_arduino import NeoPixel_arduino
    except:
        from Algo.lib.neopixel_arduino import NeoPixel_arduino

    strand = NeoPixel_arduino('COM3')
    num_led = 484
    strand.show()
    # +-----------------------------------------------+ #

    labyrinth(list_color)
    